
services:
  ocr-api:
    build: ./ocr
    image: ai-ocr-ppocr
    ports: ["8020:8020"]
    environment:
      - CUDA_VISIBLE_DEVICES=2
      - NVIDIA_VISIBLE_DEVICES=2
      - PP_OCR_DEVICE=gpu:0        # we'll read this in code (next step)
      - OCR_BACKEND=ppocr
      - PP_OCR_LANG=en
      - PP_OCR_ENABLE_HPI=0          # try HPI on CUDA 12.6 (ORT GPU)
      - PP_OCR_ORIENTATION=textline  # <-- exclusive choice (default)
      - PP_OCR_LANG=en
      - PP_OCR_DET_SIDE=1280
      - PP_OCR_MODEL=ppocrv5_server
      - UVICORN_WORKERS=1
      
    deploy:
      resources:
        reservations:
          devices:
            - capabilities: [gpu]
    networks: ["ai-net"]


  rtdetr-api:
    build:
      context: ./inference
      dockerfile: Dockerfile
    image: rtdetr-api:latest
    container_name: rtdetr-api
    command: ["uvicorn", "app.main:app", "--host", "0.0.0.0", "--port", "8000"]
    ports:
      - "8000:8000"
    gpus:
      - device_ids: ["1"]
        capabilities: ["gpu"]
    ipc: host
    ulimits:
      memlock: -1
      stack: 67108864
    environment:
      ENGINE_PATH: /app/models/rtdetr-l.engine
      NVIDIA_VISIBLE_DEVICES: "1"          # fallback for older runtimes
      NVIDIA_DRIVER_CAPABILITIES: compute,utility
    restart: unless-stopped
    networks:
      - ai-net            

  vnc-instance-1:
    image: ai-sandbox
    build:
      context: ./agent          # <- folder that contains the Dockerfile you pasted
      dockerfile: Dockerfile
    container_name: vnc-instance-1
    ports:
      - "5901:5901"
    volumes:
      - ./tasks:/tasks:rw
      # Mount host Firefox Snap profile and cache into container
      - /home/theiss/snap/firefox/common/.mozilla:/root/.mozilla:rw
      - /home/theiss/snap/firefox/common/.cache/mozilla:/root/.cache/mozilla:rw
    gpus:
      - device_ids: ["0"]
        capabilities: ["gpu"]
    environment:
      AGENT_MODE: dynamic
      RTDETR_API_URL: "http://rtdetr-api:8000/predict"   # <-- key line
      NVIDIA_VISIBLE_DEVICES: "0"
      NVIDIA_DRIVER_CAPABILITIES: compute,utility
      TASK_PLANNER_URL: http://task-planner:8000/v1/actions/next
      PLANNER_API_KEY: taskPlannerApiSecret
      # Explicitly set Firefox binary and profile (adjust profile dir name if different)
      FIREFOX_BIN: "/usr/bin/firefox-esr"
      FIREFOX_PROFILE_PATH: "/root/.mozilla/firefox/agent1.default-esr"
      AGENT_GOAL: "Open Firefox and navigate to gmail.com. If not logged in, use generic login steps: find and click 'Sign in', enter username/email, password, and submit. Once in Gmail, repeat the following 5 times: Click 'Compose' or equivalent to start a new email. Confirm compose page loaded with wait for 'To' or 'Recipients'. Enter 'andrew.theiss@gmail.com' in To field. Set subject to 'Your AI is working successfully'. Add a simple body like 'Test email from automation'. Click 'Send'. If not on compose page after send, navigate back to Inbox via sidebar or button. After 5 sends, go to 'Sent' folder via sidebar, scroll/refresh if needed, and verify the 5 emails appear by checking for subjects via OCR. Handle any dialogs, captchas, or prompts by reading and clicking appropriate buttons (e.g., 'Continue', 'OK'). If impossible, stop"
      SECRETS_EMAIL: "abc@example.com"
      SECRETS_PASSWORD: "correcthorsebatterystaple"
    restart: unless-stopped
    depends_on:
      - rtdetr-api
      - task-planner
    networks:
      - ai-net

  vnc-instance-2:
    image: ai-sandbox
    container_name: vnc-instance-2
    ports:
      - "5902:5901"
    volumes:
      - ./tasks:/tasks:rw
      - ./profiles/agent-2/.mozilla:/root/.mozilla:rw
      - ./profiles/agent-2/.cache/mozilla:/root/.cache/mozilla:rw
    gpus:
      - device_ids: ["0"]
        capabilities: ["gpu"]
    environment:
      AGENT_MODE: dynamic
      RTDETR_API_URL: "http://rtdetr-api:8000/predict"   # <-- key line
      NVIDIA_VISIBLE_DEVICES: "0"
      NVIDIA_DRIVER_CAPABILITIES: compute,utility
      TASK_PLANNER_URL: http://task-planner:8000/v1/actions/next
      PLANNER_API_KEY: taskPlannerApiSecret
      FIREFOX_BIN: "/usr/bin/firefox-esr"
      FIREFOX_PROFILE_PATH: "/root/.mozilla/firefox/agent2.default-esr"
      AGENT_GOAL: "Open Firefox if not already. For each of 10 different websites (e.g., amazon.com, ebay.com, tcgplayer.com, walmart.com, target.com, bestbuy.com, pokemoncenter.com, cardkingdom.com, trollandtoad.com, coolstuffinc.com), do: Navigate to the site, use search bar to query 'pokemon booster box', wait for results page, scan via OCR for prices (look for '$' followed by numbers), note the lowest price found on that site. After all sites, compare the lowest prices collected. Use terminal (open if needed, type commands) to create/append to 'pokemon_price.txt' with the overall cheapest price, site, and date. Handle any popups, ads, or load issues by closing/refreshing; if a site blocks, skip and note. If file ops fail in one way, try text editor alternative like gedit to save the file."
      SECRETS_EMAIL: "abc@example.com"
      SECRETS_PASSWORD: "correcthorsebatterystaple"
    restart: unless-stopped
    depends_on:
      - rtdetr-api
      - task-planner
    networks:
      - ai-net

  task-planner:
    build:
      context: ./taskPlanner
      dockerfile: Dockerfile
    container_name: task-planner
    ports:
      - "8010:8000"
    environment:
      PLANNER_API_KEY: taskPlannerApiSecret
      OLLAMA_OPENAI_BASE: http://host.docker.internal:11434/v1
      OLLAMA_MODEL: gpt-oss:120b
    # map host.docker.internal on Linux (Desktop already provides it)
    extra_hosts:
      - "host.docker.internal:host-gateway"
    networks:
      - ai-net

networks:
  ai-net:
    driver: bridge

volumes:
  agent1_mozilla:
  agent1_cache:
  agent2_mozilla:
  agent2_cache: